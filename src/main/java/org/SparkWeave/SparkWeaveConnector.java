/**
 * This file was automatically generated by the Mule Development Kit
 */
package org.sparkweave;

import org.mule.api.annotations.Connector;
import org.mule.api.annotations.Connect;
import org.mule.api.annotations.ValidateConnection;
import org.mule.api.annotations.ConnectionIdentifier;
import org.mule.api.annotations.Disconnect;
import org.mule.api.annotations.param.ConnectionKey;
import org.mule.api.annotations.param.Default;
import org.mule.api.annotations.param.Optional;
import org.mule.api.annotations.param.Payload;
import org.mule.api.ConnectionException;
import org.mule.api.annotations.Configurable;
import org.mule.api.annotations.Processor;

import java.io.InputStream;
import java.util.List;

import org.sparkweave.filesync4j.client.FileSyncClient;


/**
 * SparkWeave Cloud Connector
 * 
 * @author SparkWeave, LLC.
 */
@Connector(name = "sparkweave", schemaVersion = "3.3.0-SNAPSHOT")
public class SparkWeaveConnector
{
  private FileSyncClient FsClient;
  /**
   * The server name of SparkWeave server
   */
  @Configurable
  private String         Server;

  public void setServer(String server)
  {
    this.Server = server;
  }

  public String getServer()
  {
    return Server;
  }

  /**
   * The user email address to access SparkWeave FileSync Services
   */
  @Configurable
  private String UserEmail;

  public void setUserEmail(String str)
  {
    UserEmail = str;
  }

  public String getUserEmail()
  {
    return UserEmail;
  }

  /**
   * The user password to access SparkWeave FileSync Services
   */
  @Configurable
  private String UserPassword;

  public void setUserPassword(String str)
  {
    UserPassword = str;
  }

  public String getUserPassword()
  {
    return UserPassword;
  }

  /**
   * Set to true to use https communication (default: false)
   */
  @Configurable
  @Optional
  @Default("false")
  private boolean UseHttps;

  public void setUseHttps(boolean value)
  {
    UseHttps = value;
  }

  public boolean getUseHttps()
  {
    return UseHttps;
  }

  /**
   * Turn debug on
   */
  @Configurable
  @Optional
  @Default("false")
  private boolean Debug;

  public boolean isDebug()
  {
    return Debug;
  }

  public void setDebug(boolean debug)
  {
    this.Debug = debug;
  }

  /**
   * Connect
   * 
   * @param username
   *          A username
   * @param password
   *          A password
   * @throws ConnectionException
   */
  @Connect
  public void connect(@ConnectionKey String username, String password)
      throws ConnectionException
  {
    FsClient = new FileSyncClient();
    FsClient.Login();
  }

  /**
   * Disconnect
   */
  @Disconnect
  public void disconnect()
  {
    /*
     * CODE FOR CLOSING A CONNECTION GOES IN HERE
     */
  }

  /**
   * Are we connected
   */
  @ValidateConnection
  public boolean isConnected()
  {
    return true;
  }

  /*
   * return a string for a session id?
   */
  @ConnectionIdentifier
  public String getSessionId()
  {
    return "SparkWeave";
  }

  /**
   * Upload file to SparkWeave. The payload is an InputStream containing bytes
   * of the data to be uploaded.
   * 
   * {@sample.xml ../../../doc/sparkweave-connector.xml.sample
   * sparkweave:upload-file}
   * 
   * @param fileDataObj
   *          file to be uploaded
   * @param overwrite
   *          overwrite file in case it already exists
   * @param path
   *          The destination path to file
   * 
   * @return http response
   * @throws Exception
   *           exception
   */
  @SuppressWarnings("resource")
  @Processor
  public String uploadFile(@Payload InputStream fileDataObj,
      @Optional @Default("false") Boolean overwrite, String path)
      throws Exception
  {
    return FsClient.UploadFile(fileDataObj, overwrite, path);
  }

  /**
   * Create new folder on SparkWeave
   * 
   * {@sample.xml ../../../doc/sparkweave-connector.xml.sample
   * sparkweave:create-folder}
   * 
   * @param path
   *          full path of the folder to be created
   * 
   * @return http response
   * @throws Exception
   *           exception
   */
  @Processor
  public String createFolder(String path) throws Exception
  {
    return FsClient.CreateFolder(path);
  }
  
  /**
   * Deletes a file or folder.
   * 
   * {@sample.xml ../../../doc/sparkweave-connector.xml.sample sparkweave:delete}
   * 
   * @param accessToken
   *            accessToken
   * @param accessTokenSecret
   *            access token secret
   * @param path
   *            full path to the file to be deleted
   * 
   * @return http response
   * @throws Exception
   *             exception
   */
  @Processor
  public String delete(String path) throws Exception {
    return FsClient.Delete(path);
  }

  /**
   * Downloads a file from sparkweave
   * 
   * {@sample.xml ../../../doc/sparkweave-connector.xml.sample sparkweave:download-file}
   * 
   * @param accessToken
   *            accessToken
   * @param accessTokenSecret
   *            access token secret
   * @param path
   *            path to the file
   * @param delete
   *            delete the file on the sparkweave after download (ignored if
   *            moveTo is set)
   * @param moveTo
   *            Specifies the destination path, including the new name for the
   *            file or folder, relative to root.
   * 
   * @return Stream containing the downloaded file data
   * @throws Exception
   *             exception
   */
  @Processor
  public InputStream downloadFile(String path,
      @Optional @Default("false") boolean delete) throws Exception {
    return FsClient.DownloadFile(path, delete);
  }

  /**
   * Lists the content of the remote directory
   * 
   * {@sample.xml ../../../doc/sparkweave-connector.xml.sample sparkweave:list}
   * 
   * @param accessToken
   *            accessToken
   * @param accessTokenSecret
   *            access token secret
   * @param path
   *            path to the remote directory
   * 
   * @return List of files and/or folders
   * @throws Exception
   *             exception
   */
  @Processor
  public List<String> list(String path) throws Exception {
    return FsClient.GetFolder(path);
  }

}
