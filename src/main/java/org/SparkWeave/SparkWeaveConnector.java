/**
 * This file was automatically generated by the Mule Development Kit
 */
package org.SparkWeave;

import org.mule.api.annotations.Connector;
import org.mule.api.annotations.Connect;
import org.mule.api.annotations.ValidateConnection;
import org.mule.api.annotations.ConnectionIdentifier;
import org.mule.api.annotations.Disconnect;
import org.mule.api.annotations.param.ConnectionKey;
import org.mule.api.ConnectionException;
import org.mule.api.annotations.Configurable;
import org.mule.api.annotations.Processor;

import java.io.InputStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.JSONValue;


import com.sun.jersey.api.client.Client;
import com.sun.jersey.api.client.WebResource;
import com.sun.jersey.api.client.config.ClientConfig;
import com.sun.jersey.api.client.config.DefaultClientConfig;
import com.sun.jersey.api.client.filter.LoggingFilter;
import com.sun.jersey.core.header.FormDataContentDisposition;
import com.sun.jersey.multipart.FormDataBodyPart;
import com.sun.jersey.multipart.FormDataMultiPart;
import com.sun.jersey.multipart.MultiPart;
import com.sun.jersey.multipart.impl.MultiPartWriter;

/**
 * SparkWeave Cloud Connector
 *
 * @author MuleSoft, Inc.
 */
@Connector(name="sparkweave", schemaVersion="1.0-SNAPSHOT")
public class SparkWeaveConnector
{   
    private static final String API_VERSION = "1";
    private static final String ROOT_PARAM = "filesync";

    @Configurable
    private String Server;

    @Configurable
    private String UserEmail;

    @Configurable
    private String Password;

    @Configurable
    @Optional
    @Default("false")
    private boolean UseHttps;

    private Client client;

    // private UserInfo  UserInfo;

	  /**
	  * debug mode
	  */
	  @Configurable
	  @Optional
	  @Default("false")
	  private boolean Debug;

    public void setServer(String server)
    {
        this.Server = server;
    }

    public String getServer()
    {
        return this.Server;
    }

    public void setUserEmail(String userEmail)
    {
        this.UserEmail = userEmail;
    }

    public String getUserEmail()
    {
        return this.UserEmail;
    }

    public void setPassword(String password)
    {
        this.Password = password;
    }

    public String getPassword()
    {
        return this.Password;
    }

    public void setUseHttps(boolean useHttps)
    {
        this.UseHttps = useHttps;
    }

    public boolean getUseHttps()
    {
        return this.UseHttps;
    }

	  public boolean isDebug() {
		  return Debug;
	  }

	  public void setDebug(boolean debug) {
		  this.Debug = debug;
	  }

	  protected Client getClient() {
		  if (client == null) {
			  ClientConfig cc = new DefaultClientConfig();
			  cc.getClasses().add(MultiPartWriter.class);
			  client = Client.create(cc);
		  }
		  return client;
	  }

    /**
     * Connect
     *
     * @param username A username
     * @param password A password
     * @throws ConnectionException
     */
    @Connect
    public void connect(@ConnectionKey String username, String password)
        throws ConnectionException {
        /*
         * CODE FOR ESTABLISHING A CONNECTION GOES IN HERE
         */
    }

    /**
     * Disconnect
     */
    @Disconnect
    public void disconnect() {
        /*
         * CODE FOR CLOSING A CONNECTION GOES IN HERE
         */
    }

    /**
     * Are we connected
     */
    @ValidateConnection
    public boolean isConnected() {
        return true;
    }

    /**
     * Are we connected
     */
    @ConnectionIdentifier
    public String connectionId() {
        return "001";
    }

    /**
     * Custom processor
     *
     * {@sample.xml ../../../doc/SparkWeave-connector.xml.sample sparkweave:my-processor}
     *
     * @param content Content to be processed
     * @return Some string
     */
    @Processor
    public String myProcessor(String content)
    {
        /*
         * MESSAGE PROCESSOR CODE GOES HERE
         */

        return content;
    }
}
